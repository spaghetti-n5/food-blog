{"version":3,"sources":["webpack:///./src/components/blogList-css-modules.module.css","webpack:///./src/components/blogList.js"],"names":["module","exports","BlogList","data","pageContext","currentPage","numPages","isFirst","isLast","prevPage","toString","nextPage","title","className","styles","thumbPostContainer","allMarkdownRemark","edges","map","node","key","id","thumbPostWrap","to","frontmatter","slug","fluid","coverImage","childImageSharp","style","height","thumbPostDate","date","thumbPostTitle","excerpt","thumbCategories","categories","join","paginationWrap","rel","Array","from","length","_","i","fontWeight"],"mappings":"8EACAA,EAAOC,QAAU,CAAC,mBAAqB,yDAAyD,cAAgB,oDAAoD,eAAiB,qDAAqD,cAAgB,oDAAoD,gBAAkB,sDAAsD,eAAiB,qDAAqD,UAAY,kD,kCCDxc,sJASe,SAASC,EAAT,GAA0C,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,YAC/BC,EAA0BD,EAA1BC,YAAaC,EAAaF,EAAbE,SACfC,EAA0B,IAAhBF,EACVG,EAASH,IAAgBC,EACzBG,EAAWJ,EAAc,GAAM,EAAI,IAAM,KAAOA,EAAc,GAAGK,WACjEC,EAAW,KAAON,EAAc,GAAGK,WACzC,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKE,MAAM,UACT,yBAAKC,UAAWC,IAAOC,oBACpBZ,EAAKa,kBAAkBC,MAAMC,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACnC,OACI,yBAAKC,IAAKD,EAAKE,GAAIR,UAAWC,IAAOQ,eACjC,kBAAC,OAAD,CAAMC,GAAE,IAAMJ,EAAKK,YAAYC,MAC7B,kBAAC,IAAD,CAAKC,MAAOP,EAAKK,YAAYG,WAAWC,gBAAgBF,MAAOG,MAAO,CAAEC,OAAQ,eAC9E,uBAAGjB,UAAWC,IAAOiB,eAAgBZ,EAAKK,YAAYQ,MACtD,wBAAInB,UAAWC,IAAOmB,gBAAiBd,EAAKK,YAAYZ,OACxD,2BAAIO,EAAKe,SACT,uBAAGrB,UAAWC,IAAOqB,iBAAkBhB,EAAKK,YAAYY,WAAWC,KAAK,aAKxF,wBAAIxB,UAAWC,IAAOwB,iBAClB/B,GACA,kBAAC,OAAD,CAAMgB,GAAId,EAAU8B,IAAI,QAAxB,uBAIDC,MAAMC,KAAK,CAAEC,OAAQpC,IAAY,SAACqC,EAAGC,GAAJ,OAChC,wBAAIxB,IAAG,qBAAsBwB,EAAI,IAC/B,kBAAC,OAAD,CACErB,GAAE,KAAY,IAANqB,EAAU,GAAKA,EAAI,GAC3Bf,MAAO,CACLgB,WAAYD,EAAI,IAAMvC,EAAc,OAAS,WAG9CuC,EAAI,QAITpC,GACA,kBAAC,OAAD,CAAMe,GAAIZ,EAAU4B,IAAI,QAAxB","file":"component---src-components-blog-list-js-4ab308bcc649a513869b.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"thumbPostContainer\":\"blogList-css-modules-module--thumbPostContainer--jAJPM\",\"thumbPostWrap\":\"blogList-css-modules-module--thumbPostWrap--2ppMV\",\"thumbPostTitle\":\"blogList-css-modules-module--thumbPostTitle--2c9S8\",\"thumbPostDate\":\"blogList-css-modules-module--thumbPostDate--X744q\",\"thumbCategories\":\"blogList-css-modules-module--thumbCategories--wSOhe\",\"paginationWrap\":\"blogList-css-modules-module--paginationWrap--3Vvt8\",\"postTitle\":\"blogList-css-modules-module--postTitle--18kIe\"};","import React from \"react\";\nimport { graphql, Link } from \"gatsby\";\n\nimport SEO from \"../components/seo\";\nimport Layout from \"../components/layout\";\nimport Img from \"gatsby-image\";\n\nimport styles from \"./blogList-css-modules.module.css\";\n\nexport default function BlogList({ data, pageContext }) {\n  const { currentPage, numPages } = pageContext\n  const isFirst = currentPage === 1\n  const isLast = currentPage === numPages\n  const prevPage = currentPage - 1 === 1 ? '/' : `/`+ ((currentPage - 1).toString())\n  const nextPage = `/`+ ((currentPage + 1).toString())\n  return (\n    <Layout>\n      <SEO title=\"Posts\" />\n        <div className={styles.thumbPostContainer}>\n          {data.allMarkdownRemark.edges.map(({ node }) => {\n            return (\n                <div key={node.id} className={styles.thumbPostWrap}>\n                    <Link to={`/${node.frontmatter.slug}`}>\n                      <Img fluid={node.frontmatter.coverImage.childImageSharp.fluid} style={{ height: \"184.617px\" }} />\n                        <p className={styles.thumbPostDate}>{node.frontmatter.date}</p>\n                        <h2 className={styles.thumbPostTitle}>{node.frontmatter.title}</h2>\n                        <p>{node.excerpt}</p>\n                        <p className={styles.thumbCategories}>{node.frontmatter.categories.join(', ')}</p>\n                  </Link>\n                </div>\n          )})}\n        </div>\n        <ul className={styles.paginationWrap}>\n          {!isFirst && (\n            <Link to={prevPage} rel=\"prev\">\n              ← Pagina precedente\n            </Link>\n          )}\n          {Array.from({ length: numPages }, (_, i) => (\n            <li key={`pagination-number${i + 1}`}>\n              <Link\n                to={`/${i === 0 ? '' : i + 1}`}\n                style={{\n                  fontWeight: i + 1 === currentPage ? 'bold' : 'normal',\n                }}\n              >\n                {i + 1}\n              </Link>\n            </li>\n          ))}\n          {!isLast && (\n            <Link to={nextPage} rel=\"next\">\n              Pagina successiva →\n            </Link>\n          )}\n        </ul>\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query($skip: Int!, $limit: Int!){\n    allMarkdownRemark(\n      sort: {fields: frontmatter___date, order: DESC},\n      limit: $limit\n      skip: $skip\n      ) {\n      totalCount\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            slug\n            date(formatString: \"DD MMMM YYYY\", locale: \"it\")\n            categories\n            coverImage {\n              childImageSharp {\n                fluid(maxWidth: 380) {\n                  ...GatsbyImageSharpFluid\n                  ...GatsbyImageSharpFluidLimitPresentationSize\n                }\n              }\n            }\n          }\n          excerpt\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}